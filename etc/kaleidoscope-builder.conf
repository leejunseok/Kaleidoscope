# -*- shell-script -*-

########
######## Keyboard hardware definitions
########

: "${BOARD:=model01}"

if [[ -z "${ARCH}" && -n "${FQBN}" ]]; then
	ARCH=$(echo "${FQBN}" | sed -n -e 's/^[^:]\+:\([^:]\+\).*/\1/p')
fi

: "${ARCH:=avr}"

if [ "${ARCH}" = "virtual" ]; then
	: "${FQBN:=keyboardio:virtual:${BOARD}}"
	: "${COMPILER_PATH:=/usr/bin/}"

	COMPILER_PREFIX=""
fi

: "${FQBN:=keyboardio:${ARCH}:${BOARD}}"

find_device_port() {
	if [ -n "${DEVICE_PORT}" ]; then
		echo "DEVICE_PORT=\"${DEVICE_PORT}\" predefined."
		return
	fi

	find_device_vid_pid
	if [ "${uname_S}" = "Darwin" ]; then
		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-macos"
		DEVICE_PORT="$(perl ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID})"
	elif [ "${uname_O}" = "Cygwin" ]; then
		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-windows.ps1"
		DEVICE_PORT="$(powershell -noprofile -executionpolicy bypass ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID} -Format Cygwin)"
		DEVICE_COM_PORT="$(powershell -noprofile -executionpolicy bypass ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID} -Format COM)"
	elif [ "${uname_S}" = "FreeBSD" ]; then
		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-freebsd"
		DEVICE_PORT="$(perl ${DEVICE_PORT_PROBER})"
	else
		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-linux-udev"
		DEVICE_PORT="$(perl ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID})"
	fi
}

find_bootloader_ports() {
	if [ -n "${DEVICE_PORT_BOOTLOADER}" ]; then
		echo "DEVICE_PORT_BOOTLOADER=\"${DEVICE_PORT_BOOTLOADER}\" predefined."
		return
	fi

	find_device_vid_pid
	: "${BOOTLOADER_VID:=${VID}}"
	if [ "${uname_S}" = "Darwin" ]; then
		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-macos"
		DEVICE_PORT_BOOTLOADER="$(perl ${DEVICE_PORT_PROBER} ${BOOTLOADER_VID} ${BOOTLOADER_PID})"
	elif [ "${uname_O}" = "Cygwin" ]; then
		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-windows.ps1"
		DEVICE_PORT_BOOTLOADER="$(powershell -noprofile -executionpolicy bypass ${DEVICE_PORT_PROBER} ${BOOTLOADER_VID} ${BOOTLOADER_PID} -Format COM)"
	elif [ "${uname_S}" = "FreeBSD" ]; then
		DEVICE_PORT_PROBER="${KALEIDOSCPE_BIN_DIR}/find-device-port-freebsd"
		DEVICE_PORT_BOOTLOADER="$(perl ${DEVICE_PORT_PROBER})"

	else

		DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-linux-udev"
		DEVICE_PORT_BOOTLOADER="$(perl ${DEVICE_PORT_PROBER} ${BOOTLOADER_VID} ${BOOTLOADER_PID})"
	fi
}

if [ "${uname_S}" = "FreeBSD" ]; then
	: "${AVR_SIZE:=/usr/local/bin/avr-size}"
	: "${AVR_NM:=/usr/local/bin/avr-nm}"
	: "${AVR_OBJDUMP:=/usr/local/bin/avr-objdump}"

	if [ "${ARCH}" = "virtual" ]; then
		: "${COMPILER_PATH:=/usr/local/bin/}"
	fi

elif [ "${uname_O}" = "Cygwin" ]; then
	# The Windows arduino-builder.exe doesn't understand being told to exec against Cygwin symlinks
	CCACHE_NOT_SUPPORTED=1

	#
	# It's important that all of these be underneath /cygdrive/c so they can be converted to Windows paths that the
	# Windows Arduino binaries can understand.
	: "${TMPDIR:=/cygdrive/c/Users/${USER}/AppData/Local/Temp}"

	# We need to prevent Windows executables from being passed parameters that are absolute paths, since they won't
	# be interpretable when of the form /cygdrive/c/foo. To work around this, we set the common path root variables
	# to use relative paths instead of absolute paths, since those have mostly platform-agnostic behavior.
	#
	# Note that this trick requires that all of these paths exist on the same drive letter as the current directory,
	# since otherwise even the relative paths would include Cygwin-specific components. So...
	if [[ $(realpath --relative-base=/cygdrive/c .) == /* ]]; then
		echo "kaleidoscope-builder's Cygwin support is currently limited to running from within /cygdrive/c"
		exit 1
	fi

	TMPDIR="$(realpath --relative-to=./ ${TMPDIR})"

fi
