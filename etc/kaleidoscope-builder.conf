# -*- shell-script -*-

########
######## Keyboard hardware definitions
########

: "${BOARD:=model01}"

if [[  -z "${ARCH}" && -n "${FQBN}" ]]; then
   ARCH=$(echo "${FQBN}" | sed -n -e 's/^[^:]\+:\([^:]\+\).*/\1/p')
fi

: "${ARCH:=avr}"

if [ "${ARCH}" = "virtual" ]; then
    : "${FQBN:=keyboardio:virtual:${BOARD}}"
    : "${COMPILER_PATH:=/usr/bin/}" 

    COMPILER_PREFIX=""
fi

: "${FQBN:=keyboardio:${ARCH}:${BOARD}}"

########
######## Host OS specific commands
########

## Platform-specific overrides
# Shamelessly stolen from git's Makefile
uname_S=$(uname -s 2>/dev/null || echo not)
uname_O=$(uname -o 2>/dev/null || echo not)



find_device_port() {
    find_device_vid_pid
    DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-linux-udev"
    if [[ "${DEVICE_PORT}" = "" ]]; then
      DEVICE_PORT="$(perl ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID})"
    else
      echo "DEVICE_PORT=\"${DEVICE_PORT}\" predefined."
    fi
}

reset_device_cmd() {
    if [ -z ${NO_RESET} ]; then
        stty -F ${DEVICE_PORT} 1200 hupcl
    fi
}

find_bootloader_ports() {
    find_device_vid_pid
    : "${BOOTLOADER_VID:=${VID}}"
    DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-linux-udev"
    if [[ "${DEVICE_PORT_BOOTLOADER}" = "" ]]; then
      DEVICE_PORT_BOOTLOADER="$(perl ${DEVICE_PORT_PROBER} ${BOOTLOADER_VID} ${BOOTLOADER_PID})"
    else
      echo "DEVICE_PORT_BOOTLOADER=\"${DEVICE_PORT_BOOTLOADER}\" predefined."
    fi
}



if [ "${uname_S}" = "Darwin" ]; then

    find_device_port() {
	DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-macos"
        DEVICE_PORT="$(perl ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID})"
    }

    reset_device_cmd() {
	/bin/stty -f ${DEVICE_PORT} 1200
    }


    find_bootloader_ports() {
        find_device_vid_pid
        : "${BOOTLOADER_VID:=${VID}}"
	DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-macos"
        if [[ "${DEVICE_PORT_BOOTLOADER}" = "" ]]; then
          DEVICE_PORT_BOOTLOADER="$(perl ${DEVICE_PORT_PROBER} ${BOOTLOADER_VID} ${BOOTLOADER_PID})"
        else
          echo "DEVICE_PORT_BOOTLOADER=\"${DEVICE_PORT_BOOTLOADER}\" predefined."
        fi
    }

elif [ "${uname_S}" = "FreeBSD" ]; then

    find_device_port() {
	DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-freebsd"
	DEVICE_PORT="$(perl ${DEVICE_PORT_PROBER})"
    }

    reset_device_cmd() {
	/bin/stty -f ${DEVICE_PORT} 1200
    }

    : "${AVR_SIZE:=/usr/local/bin/avr-size}"
    : "${AVR_NM:=/usr/local/bin/avr-nm}"
    : "${AVR_OBJDUMP:=/usr/local/bin/avr-objdump}"

    find_bootloader_ports() {
	DEVICE_PORT_PROBER="${KALEIDOSCPE_BIN_DIR}/find-device-port-freebsd"
	DEVICE_PORT_BOOTLOADER="$(perl ${DEVICE_PORT_PROBER})"
    }

    if [ "${ARCH}" = "virtual" ]; then
        : "${COMPILER_PATH:=/usr/local/bin/}"
    fi

elif [ "${uname_O}" = "Cygwin" ]; then
    # The Windows arduino-builder.exe doesn't understand being told to exec against Cygwin symlinks
    CCACHE_NOT_SUPPORTED=1

    #
    # It's important that all of these be underneath /cygdrive/c so they can be converted to Windows paths that the
    # Windows Arduino binaries can understand.
    : "${TMPDIR:=/cygdrive/c/Users/${USER}/AppData/Local/Temp}"

    # We need to prevent Windows executables from being passed parameters that are absolute paths, since they won't
    # be interpretable when of the form /cygdrive/c/foo. To work around this, we set the common path root variables
    # to use relative paths instead of absolute paths, since those have mostly platform-agnostic behavior.
    #
    # Note that this trick requires that all of these paths exist on the same drive letter as the current directory,
    # since otherwise even the relative paths would include Cygwin-specific components. So...
    if [[ $(realpath --relative-base=/cygdrive/c .) == /* ]]; then
        echo "kaleidoscope-builder's Cygwin support is currently limited to running from within /cygdrive/c"
        exit 1
    fi

    TMPDIR="$(realpath --relative-to=./ ${TMPDIR})"

    find_device_port() {
        find_device_vid_pid
        DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-windows.ps1"
        DEVICE_PORT="$(powershell -noprofile -executionpolicy bypass ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID} -Format Cygwin)"
        DEVICE_COM_PORT="$(powershell -noprofile -executionpolicy bypass ${DEVICE_PORT_PROBER} ${VID} ${SKETCH_PID} -Format COM)"
    }

    reset_device_cmd() {
        cmd /c mode ${DEVICE_COM_PORT} baud=1200
    }

    find_bootloader_ports() {
        find_device_vid_pid
        : "${BOOTLOADER_VID:=${VID}}"
        DEVICE_PORT_PROBER="${KALEIDOSCOPE_BIN_DIR}/find-device-port-windows.ps1"
        DEVICE_PORT_BOOTLOADER="$(powershell -noprofile -executionpolicy bypass ${DEVICE_PORT_PROBER} ${BOOTLOADER_VID} ${BOOTLOADER_PID} -Format COM)"
    }

fi

